# GraphQL schema example
#
# https://gqlgen.com/getting-started/

directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

# new directive
directive @auth on FIELD_DEFINITION

scalar Any

type Todo {
  _id: ID!
  text: String!
  done: Boolean!
  user: User!
}

type User {
  _id: ID!
  name: String!
  username: String!
  email: String! 
  password: String!
}

type Employee {
  _id: ID!
  firstName: String!
  lastName: String!
  email: String!
  address: String!
  position: String!
}

type Query {
  todos: [Todo!]! @auth
  todo(text: String): Todo! @auth
  user(email: String!): User! @auth
  userUsername(username: String!): User! @auth
  userDelete(email: String!): Boolean @auth
  users: [User!]! @auth
  employee(_id: String!): Employee! @auth
  employees: [Employee!]! @auth
  # Add Protected Resource
  protected: String! @goField(forceResolver: true) @auth
}

input NewTodo {
  text: String!
  userId: String!
}

input NewUser {
  name: String!
  username: String!
  email: String!
  password: String!
}

input NewEmployee {
  firstName: String!
  lastName: String!
  email: String!
  address: String!
  position: String!
}

input UpdateEmployee {
  firstName: String!
  lastName: String!
  email: String!
  address: String!
  position: String!
}

type Mutation {
  createTodo(input: NewTodo!): Todo! @auth
  createEmployee(input:NewEmployee!): Employee! @auth
  createUser(input: NewUser!): User! @auth
  auth: AuthOps! 
  # login(email: String!, password: String!): Token!
  updateEmployee(_id: ID!, input: UpdateEmployee!): Employee! @auth
  # deleteEmployee(_id: String!): Boolean! @auth
  deleteEmployee(_id : String!) : Boolean @auth
}

type AuthOps {
  login(email: String!, password: String!): Any! @goField(forceResolver: true)
  register(input: NewUser!): Any! @goField(forceResolver: true)
}
